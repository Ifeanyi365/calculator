{"ast":null,"code":"\n\n// import { useReducer } from \"react\"\n// import DigitButton from \"./DigitButton\"\n// import OperationButton from \"./OperationButton\"\n// import \"./styles.css\"\n\n// export const ACTIONS = {\n//   ADD_DIGIT: \"add-digit\",\n//   CHOOSE_OPERATION: \"choose-opration\",\n//   CLEAR: 'clear',\n//   DELETE_DIGIT: \"delete-digit\",\n//   EVALUATE: \"evaluate\",\n// }\n// function reducer(state, { type, payload }) {\n//   switch (type) {\n//     case ACTIONS.ADD_DIGIT:\n//       if (state.overwrite) {\n//         return {\n//           ...state,\n//           currentOPerand: payload.digit,\n//           overwrite: false,\n//         }\n//       }\n//       if (payload.digit === \"0\" && state.currentOPerand === \"0\") {\n//         return state\n//       }\n//       if (payload.digit === \".\" && state.currentOPerand.includes(\".\")) {\n//         return state\n//       }\n//       return {\n//         ...state,\n//         currentOperand: '${currentOperand || \"\"}${payload.digit}',\n//       }\n//     case ACTIONS.CHOOSE_OPERATION:\n//       if (state.currentOPerand == null && state.previousOperand == null) {\n//         return state\n//       }\n//       if (state.currentOPerand == null) {\n//         return {\n//           ...state,\n//           operation: payload.opertion,\n//         }\n//       }\n//       if (state.previousOperand == null) {\n//         return {\n//           ...state,\n//           operation: payload.operation,\n//           previousOperand: state.currentOPerand,\n//           currentOPerand: null,\n\n//         }\n//       }\n//       return {\n//         ...state,\n//         previousOperand: evaluate(state),\n//         operation: payload.operation,\n//         currentOPerand: null\n//       }\n//     case ACTIONS.CLEAR:\n//       return {}\n//     case ACTIONS.DELETE_DIGIT:\n//       if (state.overwrite) {\n//         return {\n//           ...state,\n//           overwrite: false,\n//           currentOPerand: null\n//         }\n//       }\n//       if (state.currentOperand == null) return state\n//       if (state.currentOperand.length === 1) {\n//         return { ...state, currentOperand: null }\n//       }\n//       return {\n//         ...state,\n//         currentOperand: state.currentOperand.slice(0, -1)\n//       }\n//     case ACTIONS.EVALUATE:\n//       if (state.operation == null || state.currentOPerand == null || state.\n//         previousOperand == null\n//       ) {\n//         return state\n//       }\n//       return {\n//         ...state,\n//         overwrite: true,\n//         previousOperand: null,\n//         operation: null,\n//         currentOPerand: evaluate(state)\n//       }\n//   }\n// }\n// function evaluate({ currentOperand, previousOperand, operation }) {\n//   const prev = parseFloat(previousOperand)\n//   const current = parseFloat(currentOperand)\n//   if (isNaN(prev) || isNaN(current)) return \"\"\n//   let computation = \"\"\n//   switch (operation) {\n//     case \"+\":\n//       computation = prev + current\n//       break\n//     case \"-\":\n//       computation = prev - current\n//       break\n//     case \"*\":\n//       computation = prev * current\n//       break\n//     case \"/\":\n//       computation = prev / current\n//       break\n//   }\n//   return computation.toString()\n// }\n// const INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n//   maximumFractionDigits: 0,\n// })\n\n// function formatOperand(operand) {\n//   if (operand == null) return \"\";\n//   const [integer, decimal] = operand.split('.')\n//   if (decimal == null) return INTEGER_FORMATTER.format(integer)\n//   return '${INTEGER_FORMATTER.format(integer)}.${decimal}'\n// }\n\n// function App() {\n//   const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n//     reducer,\n//     {}\n//   )\n//   dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit: 1 } })\n\n//   return (\n//     <div className=\"calculator-grid\">\n//       <div className=\"output\">\n//         <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n//         <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n//       </div>\n//       <button\n//         className=\"span-two\"\n//         onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n//       >\n//         AC\n//       </button>\n//       <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>DEl</button>\n//       <OperationButton operation=\"/\" dispatch={dispatch} />\n//       <DigitButton digit=\"1\" dispatch={dispatch} />\n//       <DigitButton digit=\"2\" dispatch={dispatch} />\n//       <DigitButton digit=\"3\" dispatch={dispatch} />\n//       <OperationButton operation=\"*\" dispatch={dispatch} />\n//       <DigitButton digit=\"4\" dispatch={dispatch} />\n//       <DigitButton digit=\"5\" dispatch={dispatch} />\n//       <DigitButton digit=\"6\" dispatch={dispatch} />\n//       <OperationButton operation=\"+\" dispatch={dispatch} />\n//       <DigitButton digit=\"7\" dispatch={dispatch} />\n//       <DigitButton digit=\"8\" dispatch={dispatch} />\n//       <DigitButton digit=\"9\" dispatch={dispatch} />\n//       <OperationButton operation=\"-\" dispatch={dispatch} />\n//       <DigitButton digit=\".\" dispatch={dispatch} />\n//       <DigitButton digit=\"0\" dispatch={dispatch} />\n//       <button\n//         className=\"span-two\"\n//         onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n//       >\n//         =\n//       </button>\n//     </div>\n//   )\n// }\n// export default App","map":{"version":3,"names":[],"sources":["C:/Users/USER/ReactProjects/calculator/src/App.js"],"sourcesContent":["\n\n// import { useReducer } from \"react\"\n// import DigitButton from \"./DigitButton\"\n// import OperationButton from \"./OperationButton\"\n// import \"./styles.css\"\n\n\n// export const ACTIONS = {\n//   ADD_DIGIT: \"add-digit\",\n//   CHOOSE_OPERATION: \"choose-opration\",\n//   CLEAR: 'clear',\n//   DELETE_DIGIT: \"delete-digit\",\n//   EVALUATE: \"evaluate\",\n// }\n// function reducer(state, { type, payload }) {\n//   switch (type) {\n//     case ACTIONS.ADD_DIGIT:\n//       if (state.overwrite) {\n//         return {\n//           ...state,\n//           currentOPerand: payload.digit,\n//           overwrite: false,\n//         }\n//       }\n//       if (payload.digit === \"0\" && state.currentOPerand === \"0\") {\n//         return state\n//       }\n//       if (payload.digit === \".\" && state.currentOPerand.includes(\".\")) {\n//         return state\n//       }\n//       return {\n//         ...state,\n//         currentOperand: '${currentOperand || \"\"}${payload.digit}',\n//       }\n//     case ACTIONS.CHOOSE_OPERATION:\n//       if (state.currentOPerand == null && state.previousOperand == null) {\n//         return state\n//       }\n//       if (state.currentOPerand == null) {\n//         return {\n//           ...state,\n//           operation: payload.opertion,\n//         }\n//       }\n//       if (state.previousOperand == null) {\n//         return {\n//           ...state,\n//           operation: payload.operation,\n//           previousOperand: state.currentOPerand,\n//           currentOPerand: null,\n\n\n//         }\n//       }\n//       return {\n//         ...state,\n//         previousOperand: evaluate(state),\n//         operation: payload.operation,\n//         currentOPerand: null\n//       }\n//     case ACTIONS.CLEAR:\n//       return {}\n//     case ACTIONS.DELETE_DIGIT:\n//       if (state.overwrite) {\n//         return {\n//           ...state,\n//           overwrite: false,\n//           currentOPerand: null\n//         }\n//       }\n//       if (state.currentOperand == null) return state\n//       if (state.currentOperand.length === 1) {\n//         return { ...state, currentOperand: null }\n//       }\n//       return {\n//         ...state,\n//         currentOperand: state.currentOperand.slice(0, -1)\n//       }\n//     case ACTIONS.EVALUATE:\n//       if (state.operation == null || state.currentOPerand == null || state.\n//         previousOperand == null\n//       ) {\n//         return state\n//       }\n//       return {\n//         ...state,\n//         overwrite: true,\n//         previousOperand: null,\n//         operation: null,\n//         currentOPerand: evaluate(state)\n//       }\n//   }\n// }\n// function evaluate({ currentOperand, previousOperand, operation }) {\n//   const prev = parseFloat(previousOperand)\n//   const current = parseFloat(currentOperand)\n//   if (isNaN(prev) || isNaN(current)) return \"\"\n//   let computation = \"\"\n//   switch (operation) {\n//     case \"+\":\n//       computation = prev + current\n//       break\n//     case \"-\":\n//       computation = prev - current\n//       break\n//     case \"*\":\n//       computation = prev * current\n//       break\n//     case \"/\":\n//       computation = prev / current\n//       break\n//   }\n//   return computation.toString()\n// }\n// const INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n//   maximumFractionDigits: 0,\n// })\n\n// function formatOperand(operand) {\n//   if (operand == null) return \"\";\n//   const [integer, decimal] = operand.split('.')\n//   if (decimal == null) return INTEGER_FORMATTER.format(integer)\n//   return '${INTEGER_FORMATTER.format(integer)}.${decimal}'\n// }\n\n\n// function App() {\n//   const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n//     reducer,\n//     {}\n//   )\n//   dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit: 1 } })\n\n\n//   return (\n//     <div className=\"calculator-grid\">\n//       <div className=\"output\">\n//         <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n//         <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n//       </div>\n//       <button\n//         className=\"span-two\"\n//         onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n//       >\n//         AC\n//       </button>\n//       <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>DEl</button>\n//       <OperationButton operation=\"/\" dispatch={dispatch} />\n//       <DigitButton digit=\"1\" dispatch={dispatch} />\n//       <DigitButton digit=\"2\" dispatch={dispatch} />\n//       <DigitButton digit=\"3\" dispatch={dispatch} />\n//       <OperationButton operation=\"*\" dispatch={dispatch} />\n//       <DigitButton digit=\"4\" dispatch={dispatch} />\n//       <DigitButton digit=\"5\" dispatch={dispatch} />\n//       <DigitButton digit=\"6\" dispatch={dispatch} />\n//       <OperationButton operation=\"+\" dispatch={dispatch} />\n//       <DigitButton digit=\"7\" dispatch={dispatch} />\n//       <DigitButton digit=\"8\" dispatch={dispatch} />\n//       <DigitButton digit=\"9\" dispatch={dispatch} />\n//       <OperationButton operation=\"-\" dispatch={dispatch} />\n//       <DigitButton digit=\".\" dispatch={dispatch} />\n//       <DigitButton digit=\"0\" dispatch={dispatch} />\n//       <button\n//         className=\"span-two\"\n//         onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n//       >\n//         =\n//       </button>\n//     </div>\n//   )\n// }\n// export default App\n"],"mappings":";;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}